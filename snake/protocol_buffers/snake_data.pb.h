// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: snake_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_snake_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_snake_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_snake_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_snake_5fdata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_snake_5fdata_2eproto;
namespace snake_data {
class Board;
struct BoardDefaultTypeInternal;
extern BoardDefaultTypeInternal _Board_default_instance_;
class Coordinate;
struct CoordinateDefaultTypeInternal;
extern CoordinateDefaultTypeInternal _Coordinate_default_instance_;
class Feed;
struct FeedDefaultTypeInternal;
extern FeedDefaultTypeInternal _Feed_default_instance_;
class Snake;
struct SnakeDefaultTypeInternal;
extern SnakeDefaultTypeInternal _Snake_default_instance_;
class User;
struct UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
}  // namespace snake_data
PROTOBUF_NAMESPACE_OPEN
template<> ::snake_data::Board* Arena::CreateMaybeMessage<::snake_data::Board>(Arena*);
template<> ::snake_data::Coordinate* Arena::CreateMaybeMessage<::snake_data::Coordinate>(Arena*);
template<> ::snake_data::Feed* Arena::CreateMaybeMessage<::snake_data::Feed>(Arena*);
template<> ::snake_data::Snake* Arena::CreateMaybeMessage<::snake_data::Snake>(Arena*);
template<> ::snake_data::User* Arena::CreateMaybeMessage<::snake_data::User>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace snake_data {

// ===================================================================

class Board final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snake_data.Board) */ {
 public:
  inline Board() : Board(nullptr) {}
  ~Board() override;
  explicit constexpr Board(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Board(const Board& from);
  Board(Board&& from) noexcept
    : Board() {
    *this = ::std::move(from);
  }

  inline Board& operator=(const Board& from) {
    CopyFrom(from);
    return *this;
  }
  inline Board& operator=(Board&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Board& default_instance() {
    return *internal_default_instance();
  }
  static inline const Board* internal_default_instance() {
    return reinterpret_cast<const Board*>(
               &_Board_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Board& a, Board& b) {
    a.Swap(&b);
  }
  inline void Swap(Board* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Board* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Board* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Board>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Board& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Board& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Board* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snake_data.Board";
  }
  protected:
  explicit Board(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeedsFieldNumber = 1,
    kUsersFieldNumber = 2,
  };
  // repeated .snake_data.Feed feeds = 1;
  int feeds_size() const;
  private:
  int _internal_feeds_size() const;
  public:
  void clear_feeds();
  ::snake_data::Feed* mutable_feeds(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snake_data::Feed >*
      mutable_feeds();
  private:
  const ::snake_data::Feed& _internal_feeds(int index) const;
  ::snake_data::Feed* _internal_add_feeds();
  public:
  const ::snake_data::Feed& feeds(int index) const;
  ::snake_data::Feed* add_feeds();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snake_data::Feed >&
      feeds() const;

  // repeated .snake_data.User users = 2;
  int users_size() const;
  private:
  int _internal_users_size() const;
  public:
  void clear_users();
  ::snake_data::User* mutable_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snake_data::User >*
      mutable_users();
  private:
  const ::snake_data::User& _internal_users(int index) const;
  ::snake_data::User* _internal_add_users();
  public:
  const ::snake_data::User& users(int index) const;
  ::snake_data::User* add_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snake_data::User >&
      users() const;

  // @@protoc_insertion_point(class_scope:snake_data.Board)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snake_data::Feed > feeds_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snake_data::User > users_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snake_5fdata_2eproto;
};
// -------------------------------------------------------------------

class Coordinate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snake_data.Coordinate) */ {
 public:
  inline Coordinate() : Coordinate(nullptr) {}
  ~Coordinate() override;
  explicit constexpr Coordinate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Coordinate(const Coordinate& from);
  Coordinate(Coordinate&& from) noexcept
    : Coordinate() {
    *this = ::std::move(from);
  }

  inline Coordinate& operator=(const Coordinate& from) {
    CopyFrom(from);
    return *this;
  }
  inline Coordinate& operator=(Coordinate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Coordinate& default_instance() {
    return *internal_default_instance();
  }
  static inline const Coordinate* internal_default_instance() {
    return reinterpret_cast<const Coordinate*>(
               &_Coordinate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Coordinate& a, Coordinate& b) {
    a.Swap(&b);
  }
  inline void Swap(Coordinate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Coordinate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Coordinate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Coordinate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Coordinate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Coordinate& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Coordinate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snake_data.Coordinate";
  }
  protected:
  explicit Coordinate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // int32 x = 1;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 2;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:snake_data.Coordinate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t x_;
  int32_t y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snake_5fdata_2eproto;
};
// -------------------------------------------------------------------

class Feed final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snake_data.Feed) */ {
 public:
  inline Feed() : Feed(nullptr) {}
  ~Feed() override;
  explicit constexpr Feed(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Feed(const Feed& from);
  Feed(Feed&& from) noexcept
    : Feed() {
    *this = ::std::move(from);
  }

  inline Feed& operator=(const Feed& from) {
    CopyFrom(from);
    return *this;
  }
  inline Feed& operator=(Feed&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Feed& default_instance() {
    return *internal_default_instance();
  }
  static inline const Feed* internal_default_instance() {
    return reinterpret_cast<const Feed*>(
               &_Feed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Feed& a, Feed& b) {
    a.Swap(&b);
  }
  inline void Swap(Feed* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Feed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Feed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Feed>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Feed& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Feed& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Feed* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snake_data.Feed";
  }
  protected:
  explicit Feed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointFieldNumber = 1,
  };
  // .snake_data.Coordinate point = 1;
  bool has_point() const;
  private:
  bool _internal_has_point() const;
  public:
  void clear_point();
  const ::snake_data::Coordinate& point() const;
  PROTOBUF_NODISCARD ::snake_data::Coordinate* release_point();
  ::snake_data::Coordinate* mutable_point();
  void set_allocated_point(::snake_data::Coordinate* point);
  private:
  const ::snake_data::Coordinate& _internal_point() const;
  ::snake_data::Coordinate* _internal_mutable_point();
  public:
  void unsafe_arena_set_allocated_point(
      ::snake_data::Coordinate* point);
  ::snake_data::Coordinate* unsafe_arena_release_point();

  // @@protoc_insertion_point(class_scope:snake_data.Feed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::snake_data::Coordinate* point_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snake_5fdata_2eproto;
};
// -------------------------------------------------------------------

class Snake final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snake_data.Snake) */ {
 public:
  inline Snake() : Snake(nullptr) {}
  ~Snake() override;
  explicit constexpr Snake(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Snake(const Snake& from);
  Snake(Snake&& from) noexcept
    : Snake() {
    *this = ::std::move(from);
  }

  inline Snake& operator=(const Snake& from) {
    CopyFrom(from);
    return *this;
  }
  inline Snake& operator=(Snake&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Snake& default_instance() {
    return *internal_default_instance();
  }
  static inline const Snake* internal_default_instance() {
    return reinterpret_cast<const Snake*>(
               &_Snake_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Snake& a, Snake& b) {
    a.Swap(&b);
  }
  inline void Swap(Snake* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Snake* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Snake* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Snake>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Snake& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Snake& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Snake* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snake_data.Snake";
  }
  protected:
  explicit Snake(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 2,
    kLengthFieldNumber = 1,
  };
  // repeated .snake_data.Coordinate points = 2;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::snake_data::Coordinate* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snake_data::Coordinate >*
      mutable_points();
  private:
  const ::snake_data::Coordinate& _internal_points(int index) const;
  ::snake_data::Coordinate* _internal_add_points();
  public:
  const ::snake_data::Coordinate& points(int index) const;
  ::snake_data::Coordinate* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snake_data::Coordinate >&
      points() const;

  // int32 length = 1;
  void clear_length();
  int32_t length() const;
  void set_length(int32_t value);
  private:
  int32_t _internal_length() const;
  void _internal_set_length(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:snake_data.Snake)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snake_data::Coordinate > points_;
  int32_t length_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snake_5fdata_2eproto;
};
// -------------------------------------------------------------------

class User final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snake_data.User) */ {
 public:
  inline User() : User(nullptr) {}
  ~User() override;
  explicit constexpr User(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  User(const User& from);
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  inline User& operator=(User&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User& default_instance() {
    return *internal_default_instance();
  }
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }
  inline void Swap(User* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  User* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<User>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const User& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const User& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snake_data.User";
  }
  protected:
  explicit User(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSnakeFieldNumber = 3,
    kOwnerFlagFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .snake_data.Snake snake = 3;
  bool has_snake() const;
  private:
  bool _internal_has_snake() const;
  public:
  void clear_snake();
  const ::snake_data::Snake& snake() const;
  PROTOBUF_NODISCARD ::snake_data::Snake* release_snake();
  ::snake_data::Snake* mutable_snake();
  void set_allocated_snake(::snake_data::Snake* snake);
  private:
  const ::snake_data::Snake& _internal_snake() const;
  ::snake_data::Snake* _internal_mutable_snake();
  public:
  void unsafe_arena_set_allocated_snake(
      ::snake_data::Snake* snake);
  ::snake_data::Snake* unsafe_arena_release_snake();

  // bool owner_flag = 2;
  void clear_owner_flag();
  bool owner_flag() const;
  void set_owner_flag(bool value);
  private:
  bool _internal_owner_flag() const;
  void _internal_set_owner_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:snake_data.User)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::snake_data::Snake* snake_;
  bool owner_flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snake_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Board

// repeated .snake_data.Feed feeds = 1;
inline int Board::_internal_feeds_size() const {
  return feeds_.size();
}
inline int Board::feeds_size() const {
  return _internal_feeds_size();
}
inline void Board::clear_feeds() {
  feeds_.Clear();
}
inline ::snake_data::Feed* Board::mutable_feeds(int index) {
  // @@protoc_insertion_point(field_mutable:snake_data.Board.feeds)
  return feeds_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snake_data::Feed >*
Board::mutable_feeds() {
  // @@protoc_insertion_point(field_mutable_list:snake_data.Board.feeds)
  return &feeds_;
}
inline const ::snake_data::Feed& Board::_internal_feeds(int index) const {
  return feeds_.Get(index);
}
inline const ::snake_data::Feed& Board::feeds(int index) const {
  // @@protoc_insertion_point(field_get:snake_data.Board.feeds)
  return _internal_feeds(index);
}
inline ::snake_data::Feed* Board::_internal_add_feeds() {
  return feeds_.Add();
}
inline ::snake_data::Feed* Board::add_feeds() {
  ::snake_data::Feed* _add = _internal_add_feeds();
  // @@protoc_insertion_point(field_add:snake_data.Board.feeds)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snake_data::Feed >&
Board::feeds() const {
  // @@protoc_insertion_point(field_list:snake_data.Board.feeds)
  return feeds_;
}

// repeated .snake_data.User users = 2;
inline int Board::_internal_users_size() const {
  return users_.size();
}
inline int Board::users_size() const {
  return _internal_users_size();
}
inline void Board::clear_users() {
  users_.Clear();
}
inline ::snake_data::User* Board::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:snake_data.Board.users)
  return users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snake_data::User >*
Board::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:snake_data.Board.users)
  return &users_;
}
inline const ::snake_data::User& Board::_internal_users(int index) const {
  return users_.Get(index);
}
inline const ::snake_data::User& Board::users(int index) const {
  // @@protoc_insertion_point(field_get:snake_data.Board.users)
  return _internal_users(index);
}
inline ::snake_data::User* Board::_internal_add_users() {
  return users_.Add();
}
inline ::snake_data::User* Board::add_users() {
  ::snake_data::User* _add = _internal_add_users();
  // @@protoc_insertion_point(field_add:snake_data.Board.users)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snake_data::User >&
Board::users() const {
  // @@protoc_insertion_point(field_list:snake_data.Board.users)
  return users_;
}

// -------------------------------------------------------------------

// Coordinate

// int32 x = 1;
inline void Coordinate::clear_x() {
  x_ = 0;
}
inline int32_t Coordinate::_internal_x() const {
  return x_;
}
inline int32_t Coordinate::x() const {
  // @@protoc_insertion_point(field_get:snake_data.Coordinate.x)
  return _internal_x();
}
inline void Coordinate::_internal_set_x(int32_t value) {
  
  x_ = value;
}
inline void Coordinate::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:snake_data.Coordinate.x)
}

// int32 y = 2;
inline void Coordinate::clear_y() {
  y_ = 0;
}
inline int32_t Coordinate::_internal_y() const {
  return y_;
}
inline int32_t Coordinate::y() const {
  // @@protoc_insertion_point(field_get:snake_data.Coordinate.y)
  return _internal_y();
}
inline void Coordinate::_internal_set_y(int32_t value) {
  
  y_ = value;
}
inline void Coordinate::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:snake_data.Coordinate.y)
}

// -------------------------------------------------------------------

// Feed

// .snake_data.Coordinate point = 1;
inline bool Feed::_internal_has_point() const {
  return this != internal_default_instance() && point_ != nullptr;
}
inline bool Feed::has_point() const {
  return _internal_has_point();
}
inline void Feed::clear_point() {
  if (GetArenaForAllocation() == nullptr && point_ != nullptr) {
    delete point_;
  }
  point_ = nullptr;
}
inline const ::snake_data::Coordinate& Feed::_internal_point() const {
  const ::snake_data::Coordinate* p = point_;
  return p != nullptr ? *p : reinterpret_cast<const ::snake_data::Coordinate&>(
      ::snake_data::_Coordinate_default_instance_);
}
inline const ::snake_data::Coordinate& Feed::point() const {
  // @@protoc_insertion_point(field_get:snake_data.Feed.point)
  return _internal_point();
}
inline void Feed::unsafe_arena_set_allocated_point(
    ::snake_data::Coordinate* point) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(point_);
  }
  point_ = point;
  if (point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:snake_data.Feed.point)
}
inline ::snake_data::Coordinate* Feed::release_point() {
  
  ::snake_data::Coordinate* temp = point_;
  point_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::snake_data::Coordinate* Feed::unsafe_arena_release_point() {
  // @@protoc_insertion_point(field_release:snake_data.Feed.point)
  
  ::snake_data::Coordinate* temp = point_;
  point_ = nullptr;
  return temp;
}
inline ::snake_data::Coordinate* Feed::_internal_mutable_point() {
  
  if (point_ == nullptr) {
    auto* p = CreateMaybeMessage<::snake_data::Coordinate>(GetArenaForAllocation());
    point_ = p;
  }
  return point_;
}
inline ::snake_data::Coordinate* Feed::mutable_point() {
  ::snake_data::Coordinate* _msg = _internal_mutable_point();
  // @@protoc_insertion_point(field_mutable:snake_data.Feed.point)
  return _msg;
}
inline void Feed::set_allocated_point(::snake_data::Coordinate* point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete point_;
  }
  if (point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::snake_data::Coordinate>::GetOwningArena(point);
    if (message_arena != submessage_arena) {
      point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, point, submessage_arena);
    }
    
  } else {
    
  }
  point_ = point;
  // @@protoc_insertion_point(field_set_allocated:snake_data.Feed.point)
}

// -------------------------------------------------------------------

// Snake

// int32 length = 1;
inline void Snake::clear_length() {
  length_ = 0;
}
inline int32_t Snake::_internal_length() const {
  return length_;
}
inline int32_t Snake::length() const {
  // @@protoc_insertion_point(field_get:snake_data.Snake.length)
  return _internal_length();
}
inline void Snake::_internal_set_length(int32_t value) {
  
  length_ = value;
}
inline void Snake::set_length(int32_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:snake_data.Snake.length)
}

// repeated .snake_data.Coordinate points = 2;
inline int Snake::_internal_points_size() const {
  return points_.size();
}
inline int Snake::points_size() const {
  return _internal_points_size();
}
inline void Snake::clear_points() {
  points_.Clear();
}
inline ::snake_data::Coordinate* Snake::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:snake_data.Snake.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snake_data::Coordinate >*
Snake::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:snake_data.Snake.points)
  return &points_;
}
inline const ::snake_data::Coordinate& Snake::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::snake_data::Coordinate& Snake::points(int index) const {
  // @@protoc_insertion_point(field_get:snake_data.Snake.points)
  return _internal_points(index);
}
inline ::snake_data::Coordinate* Snake::_internal_add_points() {
  return points_.Add();
}
inline ::snake_data::Coordinate* Snake::add_points() {
  ::snake_data::Coordinate* _add = _internal_add_points();
  // @@protoc_insertion_point(field_add:snake_data.Snake.points)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snake_data::Coordinate >&
Snake::points() const {
  // @@protoc_insertion_point(field_list:snake_data.Snake.points)
  return points_;
}

// -------------------------------------------------------------------

// User

// string name = 1;
inline void User::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& User::name() const {
  // @@protoc_insertion_point(field_get:snake_data.User.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void User::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:snake_data.User.name)
}
inline std::string* User::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:snake_data.User.name)
  return _s;
}
inline const std::string& User::_internal_name() const {
  return name_.Get();
}
inline void User::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* User::release_name() {
  // @@protoc_insertion_point(field_release:snake_data.User.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void User::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:snake_data.User.name)
}

// bool owner_flag = 2;
inline void User::clear_owner_flag() {
  owner_flag_ = false;
}
inline bool User::_internal_owner_flag() const {
  return owner_flag_;
}
inline bool User::owner_flag() const {
  // @@protoc_insertion_point(field_get:snake_data.User.owner_flag)
  return _internal_owner_flag();
}
inline void User::_internal_set_owner_flag(bool value) {
  
  owner_flag_ = value;
}
inline void User::set_owner_flag(bool value) {
  _internal_set_owner_flag(value);
  // @@protoc_insertion_point(field_set:snake_data.User.owner_flag)
}

// .snake_data.Snake snake = 3;
inline bool User::_internal_has_snake() const {
  return this != internal_default_instance() && snake_ != nullptr;
}
inline bool User::has_snake() const {
  return _internal_has_snake();
}
inline void User::clear_snake() {
  if (GetArenaForAllocation() == nullptr && snake_ != nullptr) {
    delete snake_;
  }
  snake_ = nullptr;
}
inline const ::snake_data::Snake& User::_internal_snake() const {
  const ::snake_data::Snake* p = snake_;
  return p != nullptr ? *p : reinterpret_cast<const ::snake_data::Snake&>(
      ::snake_data::_Snake_default_instance_);
}
inline const ::snake_data::Snake& User::snake() const {
  // @@protoc_insertion_point(field_get:snake_data.User.snake)
  return _internal_snake();
}
inline void User::unsafe_arena_set_allocated_snake(
    ::snake_data::Snake* snake) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(snake_);
  }
  snake_ = snake;
  if (snake) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:snake_data.User.snake)
}
inline ::snake_data::Snake* User::release_snake() {
  
  ::snake_data::Snake* temp = snake_;
  snake_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::snake_data::Snake* User::unsafe_arena_release_snake() {
  // @@protoc_insertion_point(field_release:snake_data.User.snake)
  
  ::snake_data::Snake* temp = snake_;
  snake_ = nullptr;
  return temp;
}
inline ::snake_data::Snake* User::_internal_mutable_snake() {
  
  if (snake_ == nullptr) {
    auto* p = CreateMaybeMessage<::snake_data::Snake>(GetArenaForAllocation());
    snake_ = p;
  }
  return snake_;
}
inline ::snake_data::Snake* User::mutable_snake() {
  ::snake_data::Snake* _msg = _internal_mutable_snake();
  // @@protoc_insertion_point(field_mutable:snake_data.User.snake)
  return _msg;
}
inline void User::set_allocated_snake(::snake_data::Snake* snake) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete snake_;
  }
  if (snake) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::snake_data::Snake>::GetOwningArena(snake);
    if (message_arena != submessage_arena) {
      snake = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, snake, submessage_arena);
    }
    
  } else {
    
  }
  snake_ = snake;
  // @@protoc_insertion_point(field_set_allocated:snake_data.User.snake)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace snake_data

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_snake_5fdata_2eproto
