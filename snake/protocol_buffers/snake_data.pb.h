// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: snake_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_snake_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_snake_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_snake_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_snake_5fdata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_snake_5fdata_2eproto;
namespace snake_data {
class board;
struct boardDefaultTypeInternal;
extern boardDefaultTypeInternal _board_default_instance_;
class coordinate;
struct coordinateDefaultTypeInternal;
extern coordinateDefaultTypeInternal _coordinate_default_instance_;
class feed;
struct feedDefaultTypeInternal;
extern feedDefaultTypeInternal _feed_default_instance_;
class user;
struct userDefaultTypeInternal;
extern userDefaultTypeInternal _user_default_instance_;
}  // namespace snake_data
PROTOBUF_NAMESPACE_OPEN
template<> ::snake_data::board* Arena::CreateMaybeMessage<::snake_data::board>(Arena*);
template<> ::snake_data::coordinate* Arena::CreateMaybeMessage<::snake_data::coordinate>(Arena*);
template<> ::snake_data::feed* Arena::CreateMaybeMessage<::snake_data::feed>(Arena*);
template<> ::snake_data::user* Arena::CreateMaybeMessage<::snake_data::user>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace snake_data {

// ===================================================================

class board final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snake_data.board) */ {
 public:
  inline board() : board(nullptr) {}
  ~board() override;
  explicit constexpr board(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  board(const board& from);
  board(board&& from) noexcept
    : board() {
    *this = ::std::move(from);
  }

  inline board& operator=(const board& from) {
    CopyFrom(from);
    return *this;
  }
  inline board& operator=(board&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const board& default_instance() {
    return *internal_default_instance();
  }
  static inline const board* internal_default_instance() {
    return reinterpret_cast<const board*>(
               &_board_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(board& a, board& b) {
    a.Swap(&b);
  }
  inline void Swap(board* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(board* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  board* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<board>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const board& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const board& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(board* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snake_data.board";
  }
  protected:
  explicit board(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeedsFieldNumber = 1,
    kUsersFieldNumber = 2,
  };
  // repeated .snake_data.feed feeds = 1;
  int feeds_size() const;
  private:
  int _internal_feeds_size() const;
  public:
  void clear_feeds();
  ::snake_data::feed* mutable_feeds(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snake_data::feed >*
      mutable_feeds();
  private:
  const ::snake_data::feed& _internal_feeds(int index) const;
  ::snake_data::feed* _internal_add_feeds();
  public:
  const ::snake_data::feed& feeds(int index) const;
  ::snake_data::feed* add_feeds();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snake_data::feed >&
      feeds() const;

  // repeated .snake_data.user users = 2;
  int users_size() const;
  private:
  int _internal_users_size() const;
  public:
  void clear_users();
  ::snake_data::user* mutable_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snake_data::user >*
      mutable_users();
  private:
  const ::snake_data::user& _internal_users(int index) const;
  ::snake_data::user* _internal_add_users();
  public:
  const ::snake_data::user& users(int index) const;
  ::snake_data::user* add_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snake_data::user >&
      users() const;

  // @@protoc_insertion_point(class_scope:snake_data.board)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snake_data::feed > feeds_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snake_data::user > users_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snake_5fdata_2eproto;
};
// -------------------------------------------------------------------

class coordinate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snake_data.coordinate) */ {
 public:
  inline coordinate() : coordinate(nullptr) {}
  ~coordinate() override;
  explicit constexpr coordinate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  coordinate(const coordinate& from);
  coordinate(coordinate&& from) noexcept
    : coordinate() {
    *this = ::std::move(from);
  }

  inline coordinate& operator=(const coordinate& from) {
    CopyFrom(from);
    return *this;
  }
  inline coordinate& operator=(coordinate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const coordinate& default_instance() {
    return *internal_default_instance();
  }
  static inline const coordinate* internal_default_instance() {
    return reinterpret_cast<const coordinate*>(
               &_coordinate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(coordinate& a, coordinate& b) {
    a.Swap(&b);
  }
  inline void Swap(coordinate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(coordinate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  coordinate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<coordinate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const coordinate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const coordinate& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(coordinate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snake_data.coordinate";
  }
  protected:
  explicit coordinate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // int32 x = 1;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 2;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:snake_data.coordinate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t x_;
  int32_t y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snake_5fdata_2eproto;
};
// -------------------------------------------------------------------

class feed final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snake_data.feed) */ {
 public:
  inline feed() : feed(nullptr) {}
  ~feed() override;
  explicit constexpr feed(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  feed(const feed& from);
  feed(feed&& from) noexcept
    : feed() {
    *this = ::std::move(from);
  }

  inline feed& operator=(const feed& from) {
    CopyFrom(from);
    return *this;
  }
  inline feed& operator=(feed&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const feed& default_instance() {
    return *internal_default_instance();
  }
  static inline const feed* internal_default_instance() {
    return reinterpret_cast<const feed*>(
               &_feed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(feed& a, feed& b) {
    a.Swap(&b);
  }
  inline void Swap(feed* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(feed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  feed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<feed>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const feed& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const feed& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(feed* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snake_data.feed";
  }
  protected:
  explicit feed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointFieldNumber = 1,
  };
  // .snake_data.coordinate point = 1;
  bool has_point() const;
  private:
  bool _internal_has_point() const;
  public:
  void clear_point();
  const ::snake_data::coordinate& point() const;
  PROTOBUF_NODISCARD ::snake_data::coordinate* release_point();
  ::snake_data::coordinate* mutable_point();
  void set_allocated_point(::snake_data::coordinate* point);
  private:
  const ::snake_data::coordinate& _internal_point() const;
  ::snake_data::coordinate* _internal_mutable_point();
  public:
  void unsafe_arena_set_allocated_point(
      ::snake_data::coordinate* point);
  ::snake_data::coordinate* unsafe_arena_release_point();

  // @@protoc_insertion_point(class_scope:snake_data.feed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::snake_data::coordinate* point_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snake_5fdata_2eproto;
};
// -------------------------------------------------------------------

class user final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snake_data.user) */ {
 public:
  inline user() : user(nullptr) {}
  ~user() override;
  explicit constexpr user(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  user(const user& from);
  user(user&& from) noexcept
    : user() {
    *this = ::std::move(from);
  }

  inline user& operator=(const user& from) {
    CopyFrom(from);
    return *this;
  }
  inline user& operator=(user&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const user& default_instance() {
    return *internal_default_instance();
  }
  static inline const user* internal_default_instance() {
    return reinterpret_cast<const user*>(
               &_user_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(user& a, user& b) {
    a.Swap(&b);
  }
  inline void Swap(user* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(user* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  user* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<user>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const user& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const user& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(user* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snake_data.user";
  }
  protected:
  explicit user(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 3,
    kNameFieldNumber = 1,
    kOwnerFlagFieldNumber = 2,
  };
  // repeated .snake_data.coordinate points = 3;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::snake_data::coordinate* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snake_data::coordinate >*
      mutable_points();
  private:
  const ::snake_data::coordinate& _internal_points(int index) const;
  ::snake_data::coordinate* _internal_add_points();
  public:
  const ::snake_data::coordinate& points(int index) const;
  ::snake_data::coordinate* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snake_data::coordinate >&
      points() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool owner_flag = 2;
  void clear_owner_flag();
  bool owner_flag() const;
  void set_owner_flag(bool value);
  private:
  bool _internal_owner_flag() const;
  void _internal_set_owner_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:snake_data.user)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snake_data::coordinate > points_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  bool owner_flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snake_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// board

// repeated .snake_data.feed feeds = 1;
inline int board::_internal_feeds_size() const {
  return feeds_.size();
}
inline int board::feeds_size() const {
  return _internal_feeds_size();
}
inline void board::clear_feeds() {
  feeds_.Clear();
}
inline ::snake_data::feed* board::mutable_feeds(int index) {
  // @@protoc_insertion_point(field_mutable:snake_data.board.feeds)
  return feeds_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snake_data::feed >*
board::mutable_feeds() {
  // @@protoc_insertion_point(field_mutable_list:snake_data.board.feeds)
  return &feeds_;
}
inline const ::snake_data::feed& board::_internal_feeds(int index) const {
  return feeds_.Get(index);
}
inline const ::snake_data::feed& board::feeds(int index) const {
  // @@protoc_insertion_point(field_get:snake_data.board.feeds)
  return _internal_feeds(index);
}
inline ::snake_data::feed* board::_internal_add_feeds() {
  return feeds_.Add();
}
inline ::snake_data::feed* board::add_feeds() {
  ::snake_data::feed* _add = _internal_add_feeds();
  // @@protoc_insertion_point(field_add:snake_data.board.feeds)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snake_data::feed >&
board::feeds() const {
  // @@protoc_insertion_point(field_list:snake_data.board.feeds)
  return feeds_;
}

// repeated .snake_data.user users = 2;
inline int board::_internal_users_size() const {
  return users_.size();
}
inline int board::users_size() const {
  return _internal_users_size();
}
inline void board::clear_users() {
  users_.Clear();
}
inline ::snake_data::user* board::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:snake_data.board.users)
  return users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snake_data::user >*
board::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:snake_data.board.users)
  return &users_;
}
inline const ::snake_data::user& board::_internal_users(int index) const {
  return users_.Get(index);
}
inline const ::snake_data::user& board::users(int index) const {
  // @@protoc_insertion_point(field_get:snake_data.board.users)
  return _internal_users(index);
}
inline ::snake_data::user* board::_internal_add_users() {
  return users_.Add();
}
inline ::snake_data::user* board::add_users() {
  ::snake_data::user* _add = _internal_add_users();
  // @@protoc_insertion_point(field_add:snake_data.board.users)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snake_data::user >&
board::users() const {
  // @@protoc_insertion_point(field_list:snake_data.board.users)
  return users_;
}

// -------------------------------------------------------------------

// coordinate

// int32 x = 1;
inline void coordinate::clear_x() {
  x_ = 0;
}
inline int32_t coordinate::_internal_x() const {
  return x_;
}
inline int32_t coordinate::x() const {
  // @@protoc_insertion_point(field_get:snake_data.coordinate.x)
  return _internal_x();
}
inline void coordinate::_internal_set_x(int32_t value) {
  
  x_ = value;
}
inline void coordinate::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:snake_data.coordinate.x)
}

// int32 y = 2;
inline void coordinate::clear_y() {
  y_ = 0;
}
inline int32_t coordinate::_internal_y() const {
  return y_;
}
inline int32_t coordinate::y() const {
  // @@protoc_insertion_point(field_get:snake_data.coordinate.y)
  return _internal_y();
}
inline void coordinate::_internal_set_y(int32_t value) {
  
  y_ = value;
}
inline void coordinate::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:snake_data.coordinate.y)
}

// -------------------------------------------------------------------

// feed

// .snake_data.coordinate point = 1;
inline bool feed::_internal_has_point() const {
  return this != internal_default_instance() && point_ != nullptr;
}
inline bool feed::has_point() const {
  return _internal_has_point();
}
inline void feed::clear_point() {
  if (GetArenaForAllocation() == nullptr && point_ != nullptr) {
    delete point_;
  }
  point_ = nullptr;
}
inline const ::snake_data::coordinate& feed::_internal_point() const {
  const ::snake_data::coordinate* p = point_;
  return p != nullptr ? *p : reinterpret_cast<const ::snake_data::coordinate&>(
      ::snake_data::_coordinate_default_instance_);
}
inline const ::snake_data::coordinate& feed::point() const {
  // @@protoc_insertion_point(field_get:snake_data.feed.point)
  return _internal_point();
}
inline void feed::unsafe_arena_set_allocated_point(
    ::snake_data::coordinate* point) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(point_);
  }
  point_ = point;
  if (point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:snake_data.feed.point)
}
inline ::snake_data::coordinate* feed::release_point() {
  
  ::snake_data::coordinate* temp = point_;
  point_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::snake_data::coordinate* feed::unsafe_arena_release_point() {
  // @@protoc_insertion_point(field_release:snake_data.feed.point)
  
  ::snake_data::coordinate* temp = point_;
  point_ = nullptr;
  return temp;
}
inline ::snake_data::coordinate* feed::_internal_mutable_point() {
  
  if (point_ == nullptr) {
    auto* p = CreateMaybeMessage<::snake_data::coordinate>(GetArenaForAllocation());
    point_ = p;
  }
  return point_;
}
inline ::snake_data::coordinate* feed::mutable_point() {
  ::snake_data::coordinate* _msg = _internal_mutable_point();
  // @@protoc_insertion_point(field_mutable:snake_data.feed.point)
  return _msg;
}
inline void feed::set_allocated_point(::snake_data::coordinate* point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete point_;
  }
  if (point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::snake_data::coordinate>::GetOwningArena(point);
    if (message_arena != submessage_arena) {
      point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, point, submessage_arena);
    }
    
  } else {
    
  }
  point_ = point;
  // @@protoc_insertion_point(field_set_allocated:snake_data.feed.point)
}

// -------------------------------------------------------------------

// user

// string name = 1;
inline void user::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& user::name() const {
  // @@protoc_insertion_point(field_get:snake_data.user.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void user::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:snake_data.user.name)
}
inline std::string* user::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:snake_data.user.name)
  return _s;
}
inline const std::string& user::_internal_name() const {
  return name_.Get();
}
inline void user::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* user::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* user::release_name() {
  // @@protoc_insertion_point(field_release:snake_data.user.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void user::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:snake_data.user.name)
}

// bool owner_flag = 2;
inline void user::clear_owner_flag() {
  owner_flag_ = false;
}
inline bool user::_internal_owner_flag() const {
  return owner_flag_;
}
inline bool user::owner_flag() const {
  // @@protoc_insertion_point(field_get:snake_data.user.owner_flag)
  return _internal_owner_flag();
}
inline void user::_internal_set_owner_flag(bool value) {
  
  owner_flag_ = value;
}
inline void user::set_owner_flag(bool value) {
  _internal_set_owner_flag(value);
  // @@protoc_insertion_point(field_set:snake_data.user.owner_flag)
}

// repeated .snake_data.coordinate points = 3;
inline int user::_internal_points_size() const {
  return points_.size();
}
inline int user::points_size() const {
  return _internal_points_size();
}
inline void user::clear_points() {
  points_.Clear();
}
inline ::snake_data::coordinate* user::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:snake_data.user.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snake_data::coordinate >*
user::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:snake_data.user.points)
  return &points_;
}
inline const ::snake_data::coordinate& user::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::snake_data::coordinate& user::points(int index) const {
  // @@protoc_insertion_point(field_get:snake_data.user.points)
  return _internal_points(index);
}
inline ::snake_data::coordinate* user::_internal_add_points() {
  return points_.Add();
}
inline ::snake_data::coordinate* user::add_points() {
  ::snake_data::coordinate* _add = _internal_add_points();
  // @@protoc_insertion_point(field_add:snake_data.user.points)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snake_data::coordinate >&
user::points() const {
  // @@protoc_insertion_point(field_list:snake_data.user.points)
  return points_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace snake_data

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_snake_5fdata_2eproto
